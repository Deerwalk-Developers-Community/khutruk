// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum CategoryTypes {
  ANIMAL
  EDUCATION
  MEDICAL
  RELIGION
  ENVIRONMENT
  DISASTER
}

enum Statuses {
  PENDING
  FROZEN
  COMPLETED
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  password      String
  email         String     @unique
  walletAddress String?    @unique @map("wallet_address")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  campaigns     Campaign[]
  donations     Donation[]
}

model Campaign {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  creatorId       String        @map("creator_id") @db.ObjectId
  sequenceId      Int           @unique @default(27) @map("sequence_id")
  description     String
  category        CategoryTypes @map("campaign_category")
  campaignAddress String        @unique @map("campaign_address")
  targetAmount    Float         @map("target_amount")
  raisedAmount    Float         @default(0) @map("raised_amount")
  releasedAmount  Float         @default(0) @map("released_amount")
  status          Statuses      @map("campaign_status")
  startDate       DateTime      @map("start_date")
  endDate         DateTime      @map("end_date")
  mediaUrls       String        @map("media_urls")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  creator            User                @relation(fields: [creatorId], references: [id])
  donations          Donation[]
  withdrawalRequests WithdrawalRequest[]
  transactions       Transaction[]
}

model Donation {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId      String   @map("campaign_id") @db.ObjectId
  donorId         String   @map("donor_id") @db.ObjectId
  amount          Float
  currency        String
  transactionHash String   @map("transaction_hash")
  paymentMethod   String   @map("payment_method")
  status          String
  donationDate    DateTime @map("donation_date")
  createdAt       DateTime @default(now()) @map("created_at")

  campaign Campaign @relation(fields: [campaignId], references: [id])
  donor    User     @relation(fields: [donorId], references: [id])
}

model WithdrawalRequest {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  campaignId      String    @map("campaign_id") @db.ObjectId
  amount          Float
  reason          String
  status          String
  transactionHash String    @map("transaction_hash")
  requestDate     DateTime  @map("request_date")
  approvalDate    DateTime? @map("approval_date")
  createdAt       DateTime  @default(now()) @map("created_at")

  campaign Campaign @relation(fields: [campaignId], references: [id])
}

model Transaction {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId     String?  @map("campaign_id") @db.ObjectId
  // relatedId      String?  @map("related_id") @db.ObjectId
  type           String
  amount         Float
  currency       String
  blockchainHash String   @map("blockchain_hash")
  status         String
  metadata       Json
  createdAt      DateTime @default(now()) @map("created_at")

  campaign Campaign? @relation(fields: [campaignId], references: [id])
}
